#  В большой текстовой строке подсчитать количество встречаемых 
# слов и вернуть 10 самых частых. Не учитывать знаки препинания 
# и регистр символов. За основу возьмите любую статью 
# из википедии или из документации к языку.

from string import punctuation

text = "Python (МФА); в русском языке встречаются названия пито́н[23] или па́йтон[24]) - \
высокоуровневый язык программирования общего назначения с динамической строгой типизацией и \
автоматическим управлением памятью[25][26], ориентированный на повышение производительности \
разработчика, читаемости кода и его качества, а также на обеспечение переносимости написанных \
на нём программ[27]. Язык является полностью объектно-ориентированным в том плане, что всё является \
объектами[25]. Необычной особенностью языка является выделение блоков кода пробельными отступами[28]. \
Синтаксис ядра языка минималистичен, за счёт чего на практике редко возникает необходимость обращаться к \
документации[27]. Сам же язык известен как интерпретируемый и используется в том числе для написания \
скриптов[25]. Недостатками языка являются зачастую более низкая скорость работы и более высокое \
потребление памяти написанных на нём программ по сравнению с аналогичным кодом, \
написанным на компилируемых языках, таких как C или C++[25][27].\n\
Python является мультипарадигменным языком программирования, поддерживающим императивное, \
процедурное, структурное, объектно-ориентированное программирование[25], метапрограммирование[29] \
и функциональное программирование[25]. Задачи обобщённого программирования решаются за счёт \
динамической типизации[30][31]. Аспектно-ориентированное программирование частично поддерживается \
через декораторы[32], более полноценная поддержка обеспечивается дополнительными фреймворками[33]. \
Такие методики как контрактное и логическое программирование можно реализовать с помощью библиотек \
или расширений[34]. Основные архитектурные черты — динамическая типизация, автоматическое управление \
памятью[25], полная интроспекция, механизм обработки исключений, поддержка многопоточных вычислений с \
глобальной блокировкой интерпретатора (GIL)[35], высокоуровневые структуры данных. Поддерживается \
разбиение программ на модули, которые, в свою очередь, могут объединяться в пакеты[36]."

marks = punctuation + "\n"
print(marks)
for mark in marks:
    if mark in marks:
        text = text.replace(mark, " ")
print(text)
list_for_count = text.lower().replace("   ", " ").replace("  ", " ").split(" ")
dict_count_words = {}
for val in list_for_count:
    dict_count_words[val] = list_for_count.count(val)
sorted_tuples = sorted(dict_count_words.items(), key = lambda item: item[1], reverse=True)
for i in range(10):
    print (sorted_tuples[i])